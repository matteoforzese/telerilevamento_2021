#####R_code_remote_sensing_first######-1

# primo codice in R per telerilevamento

#Per installare i vari pacchetti di R, le virgolette indicano un'azione che necessita di uscire da R
install.packages("raster")

#Con questa funzione scelgo la Working directory, la cartella lab
setwd("C:/lab/")

#utilizzare pacchetto raster su R
library(raster)

#importare immagine satellitare, rinomino il file tramite la freccetta per semplificare il lavoro
p224r63_2011<-brick("p224r63_2011_masked.grd")

#Dà informazioni sul file
p224r63_2011

#Permette di visualizzare il file su R, vedo 7 mappe, una per ogni banda del satellite
plot(p224r63_2011)

#cambiare i colori di visualizzazione
cl<-colorRampPalette(c("black","grey","light grey"))(100)

#plottare con nuovi colori
plot(p224r63_2011, col=cl)

#altro esempio
colore<-colorRampPalette(c("blue","green","magenta"))(100)
plot(p224r63_2011, col=colore)


#Tutte le possibili bande
#B1:BLU
#B2:VERDE
#B3:ROSSO
#B4:INFRAROSSO VICINO
#B5:INFRAROSSO MEDIO
#B6:INFRAROSSO TERMICO
#B7:INFRAROSSO MEDIO

#pulire grafica corrente
dev.off()

#Per legare due blocchi usiamo $, plottiamo una banda
plot (p224r63_2011$B1_sre)

#plottare banda 1 con color ramp palette nuova
plot (p224r63_2011$B1_sre, col=colore)

dev.off()

#Nuovo plottaggio con più bande, in un sistema organizzato di righe e colonne; in questo caso per sistemare immagini in 1 riga 2 colonne
par(mfrow=c(1,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

#plottare 4 immagini in quattro righe e una colonna
par(mfrow=c(4,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

#altro quadrato di bande, stavolta 2x2
par(mfrow=c(2,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

#2x2, con colori che rispecchiano le bande
par(mfrow=c(2,2))
clb <- colorRampPalette(c("dark blue","blue","light blue")) (100)
plot(p224r63_2011$B1_sre, col=clb)
clg <- colorRampPalette(c("dark green","green","light green")) (100)
plot(p224r63_2011$B2_sre, col=clg)
clr <- colorRampPalette(c("dark red","red","pink")) (100)
plot(p224r63_2011$B3_sre, col=clr)
clnir <- colorRampPalette(c("red","orange","yellow")) (100)
plot(p224r63_2011$B4_sre, col=clnir)


p224r63_2011 <- brick("p224r63_2011_masked.grd")
#plottare immagini con schema RGB, stretch lineare per evitare schiacciamento verso una parte del colore
plotRGB(p224r63_2011,r=3,g=2,b=1,stretch="Lin")
#aggiungo infrarossi, tolgo blu
plotRGB(p224r63_2011,r=4,g=3,b=2,stretch="Lin")
#prova con inversione infrarosso-verde
plotRGB(p224r63_2011,r=3,g=4,b=2,stretch="Lin")
#prova con inversione infrarosso-blu
plotRGB(p224r63_2011,r=3,g=2,b=4,stretch="Lin")

#creare PDF
pdf("primopdfR.pdf")

#2x2, con vari assetti RGB
par(mfrow=c(2,2))
plotRGB(p224r63_2011,r=3,g=2,b=1,stretch="Lin")
plotRGB(p224r63_2011,r=4,g=3,b=2,stretch="Lin")
plotRGB(p224r63_2011,r=3,g=4,b=2,stretch="Lin")
plotRGB(p224r63_2011,r=3,g=2,b=4,stretch="Lin")

dev.off()

#due plot con stretch lineare e istogramma, che mostra più dettagli
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

# par con colori naturali, falsi e falsi con stretch istogramma
par(mfrow=c(3,1))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

#installo nuovo pacchetto
install.packages("RStoolbox")
library(Rstoolbox)

#Multitemporal set, confronto tra 1988 e 2011
p224r63_1988 <- brick("p224r63_1988_masked.grd")
p224r63_1988
plot(p224r63_1988)
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin")

#confronto 1988-2011
par(mfrow=c(2,1))
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")

#Creare nuovo PDF
pdf("confronto 88-11")
#Par 2x2 con immagini con stretch lineare e istogramma per confronto
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")
dev.off()









######R_code_time_series.r######-2
#Time series analisys
#Greenland increase of temperature
#Data and code from Emanuela Cosma

library(raster)

#installare pacchetto che ottimizza la visualizzazione dei dati raster
install.packages("rasterVis")

library(rasterVis)

#La working directory è impostata nella cartella greenland all'interno della cartella lab
setwd("C:/lab/greenland")

#creare oggetto Rasterlayer
lst_2000<-raster("lst_2000.tif")
lst_2005<-raster("lst_2005.tif")
lst_2010<-raster("lst_2010.tif")
lst_2015<-raster("lst_2015.tif")

#immagine con i 4 elementi 2x2
par(mfrow=c(2,2))
plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

#creare una lista di file 
r.list<-list.files(pattern="lst")
r.list

#funzione che applica un'altra funzione a una lista di file 
import<-lapply(r.list, raster)
import

#riunire file in un unico pacchetto
TGr<-stack(import)
TGr
plot(TGr)

#sovrapposizione tre immagini associate ad R, G e B
plotRGB(TGr,1,2,3,stretch="Lin")

#singola legenda per blocco intero che viene plottato tutto insieme, con Level plot vediamo colori molto più dettagliati rispetto a normale plot
levelplot(TGr)
cl<-colorRampPalette(c("blue","light blue","pink","red"))(100)
levelplot(TGr, col.regions=cl)
levelplot(TGr, col.regions=cl,names.attr=c("July 2000", "July 2005","July 2010","July 2015"))
levelplot(TGr, col.regions=cl, main="LST variation in time", names.attr=c("July 2000", "July 2005","July 2010","July 2015"))

#Melt, dati sullo scioglimento
#nuova lista
meltlist<-list.files(pattern="melt")
meltgreenland<-lapply(meltlist, raster)
melt<-stack(meltgreenland)
levelplot(melt)

#sottrazione tra due matrici di dati, colori mappa X - colori mappa Y
#$ + nome dello strato mi permette la singola visualizzazione
melt_amount<-melt$X2007annual_melt-melt$X1979annual_melt

clb<-colorRampPalette(c("white","blue","pink","red"))(100)
plot(melt_amount,col=clb)

install.packages("knitr")









#####R_code_copernicus.r######-3
#visualizing copernicus data
#ci serviranno la libreria Raster per leggere i raster e la libreria NCD per leggere i file ncd
install.packages("ncdf4")
library(raster)
library(ncdf4)
setwd("C:/lab/")

#caricamento di un nuovo file .nc su R
water<-raster("c_gls_WB100_202103010000_GLOBE_S2_V1.0.1.nc")
cl <- colorRampPalette(c('light blue','green','red','yellow'))(100) #
plot(water, col=cl)

#riclassificare i colori dell'immagine
water<- raster::reclassify(lswt, cbind(252:255, NA), right=TRUE) 

#resampling, modifica la quantità di pixel/risoluzione dell'immagine, aggregando pixel in pixel più grandi attraverso la loro media, riduce il peso del file. 
#Il 100 corrisponde al numero di celle raggruppate per formare delle celle più grandi. Con 50 si diminuisce di 2500 volte la risoluzione 
waterres<-aggregate(water, fact=100)
plot(waterres, col=cl)








##### R_code_knitr.R #####-4
#using knitr to create a report

setwd("C:/lab/")

#Permette di usare le funzioni e codici knit R
install.packages("knitr")

library(knitr)

#creare automaticamente un report basato su uno script di R e un template, su PC tramite qualunque gestoredi testo
stitch("R_code_greenland.r.txt", template=system.file("misc", "knitr-template.Rnw", package="knitr"))
#risolto errore aggiungendo .txt









##### R_code_classification.r #####-5
setwd("C:/lab/")
library(raster)
library(RStoolbox)

#importo immagine tramite funzione brick
sol <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")
sol

#utilizzo plotRGB per visualizzare l'immagine, stretch per usare tutto il range di colori da 0 a 255
plotRGB(sol, 1,2,3, stretch="lin")
plotRGB(sol, 2,1,3, stretch="lin")
plotRGB(sol, 3,2,1, stretch="lin")
set.seed(42)

#UNSUPERVISED CLASSIFICATION: Tecnica che consiste nel fornire al sistema informatico una serie di input che egli riclassificherà ed organizzerà sulla base di caratteristiche comuni per cercare di effettuare ragionamenti e previsioni sugli input successivi, permette di classificare ad esempio quando una determinata patch del suolo risulta essere X (es. acqua) o Y (es. bosco)
soc <- unsuperClass(sol, nClasses=3)

#prova con 20 classi
snt <- unsuperClass(sol, nClasses=20)
plot(snt$map,col=cl)

cl <- colorRampPalette(c('yellow','red','black'))(100)
plot(soc$map,col=cl)

#download immagine da ESA, chiamata "Spiral_snapshot_pillars"
spiral<-brick("Spiral_snapshot_pillars.jpg")
spiralUC<-unsuperClass(spiral, nClasses=3)
plot(spiralUC$map,col=cl)



par(mfrow=c(1,2))
plotRGB(sol, 1,2,3, stretch="lin")
plot(soe$map,col=cl)
cl <- colorRampPalette(c('yellow','black','red'))(100)
par(mfrow=c(1,2))
plotRGB(sol, 1,2,3, stretch="lin")
plot(soc$map,col=cl)





#GRAN CANYON DATA
setwd("C:/lab/")
library(raster)
library(RStoolbox)
gc<-brick("dolansprings_oli_2013088_canyon_lrg.jpg")
plotRGB(gc, 1,2,3, stretch="lin")

#utilizzo stretch diverso 
plotRGB(gc, 1,2,3, stretch="hist")
gcc2 <- unsuperClass(gc, nClasses=2)
plot(gcc2$map)

#aumento numero classi
gcc4 <- unsuperClass(gc, nClasses=4)
plot(gcc4$map)











##### R_code_multivariate_analysis.r #####-6
#Si possono vedere file/immagini con diversa varianza/variabilità utilizzando delle funzioni. Queste prendono il nome di ANALISI MULTIVARIATE
setwd("C:/lab/")
library (raster)
library (RStoolbox)
p224r63_2011<-brick("p224r63_2011_masked.grd")
plot(p224r63_2011)
#Plot banda 1 su banda 2, otterremo un piano cartesiano XY con una scia di punti che studiano la varianza dei colori
plot(p224r63_2011$B1_sre, p224r63_2011$B2_sre, col="red", pch=19, cex=2)

#per trovare correlazione tra tutte le variabili a due a due
pairs(p224r63_2011)

#a causa di pesantezza della pca diminuiamo la grandezza del file abbassandone la risoluzione 
#aggregate cells: resampling (ricampionamento)
p224r63_2011res<-aggregate(p224r63_2011, fact=10)

par(mfrow=c(2,1))
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="lin")
plotRGB(p224r63_2011res, r=4, g=3, b=2, stretch="lin")

#principal component analysis
#funzione rasterPCA permette di identificare la PCA passando da una variabilità maggiore ad una minore, che sia però rappresentativa. 
p224r63_2011res_pca <- rasterPCA(p224r63_2011res)

#spiega quasi la totalità della varianza in questo modello (è praticamente un riassunto)
summary(p224r63_2011res_pca$model)

dev.off()
plotRGB(p224r63_2011res_pca$map, r=1,g=2,b=3,stretch="lin")

#add from students: visualizzare in modo compatto la struttura di un oggetto R 
str(p224r63_2011res_pca)












##### R_code_vegetation_indices.r #####-7
library(raster)

#per indici di vegetazione
library(RStoolbox)

#pacchetto che calcola riflessione della luce per capire l'indice di vegetazione di una determinata foto (si può estrapolare il tipo di vegetazione, lo status della vegetazione, etc)
install.packages("rasterdiv")
library(rasterdiv) 

library(rasterVis)
setwd("C:/lab/")
defor1 <- brick("defor1.png")
defor2 <- brick("defor2.png")
par(mfrow=c(2,1))
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

#per calcolare il DVI, difference vegetation index. E' un indice di vegetazione, è dato dalla differenza tra la riflettanza nell’infrarosso vicino e quella nel rosso, sa cala la vegetazione è meno in salute
#Digito defor1 e defor 2 per vedere i nomi delle bande e poi sottrarli
defor1
dvi1<-defor1$defor1.1-defor1$defor1.2
plot(dvi1)
cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100)
plot(dvi1, col=cl, main="DVI at time 1")

#stessa procedura per defor2
defor2
dvi2<-defor2$defor2.1-defor2$defor2.2
plot(dvi2, col=cl, main="DVI at time 2")
par(mfrow=c(1,2))
plot(dvi1, col=cl)
plot(dvi2, col=cl)

#differenza tra indici di vegetazione
difdvi <- dvi1 - dvi2
cld <- colorRampPalette(c('blue','white','red'))(100) 
plot(difdvi, col=cld)

# il DVI può essere normalizzato per ottenere l'NDVI
# i valori di riflettanza dipendono dai bit. In calcolo del DVI posso confrontare solo immagini con gli stessi bit. 
#NDVI assume valori che vanno da -1 a 1 e permette confronti anche tra immagini a bit differenti.
#ndvi 
#NDVI=(NIR-RED) / (NIR+RED)
ndvi1<- (defor1$defor1.1-defor1$defor1.2) / (defor1$defor1.1+defor1$defor1.2)
plot(ndvi1, col=cl)
ndvi2<- (defor2$defor2.1-defor2$defor2.2) / (defor2$defor2.1+defor2$defor2.2)
plot(ndvi2, col=cl)

#La funzione si potrebbe calcolare anche con RStoolbox::spectralIndices
vi1<-spectralIndices(defor1, green=3, red=2, nir=1)
plot(vi1, col=cl)
vi2<-spectralIndices(defor2, green=3, red=2, nir=1)
plot(vi2, col=cl)
difndvi<- ndvi1-ndvi2
plot(difndvi, col=cld)

#worldwide NDVI
plot(copNDVI)
#funzione per cambiare valori in altri valori
#i pixel coi valori 253, 254, 255 (acqua) saranno settati come "NA"
copNDVI <- reclassify(copNDVI, cbind(253:255, NA))
plot(copNDVI)
#levelplot è media di valori per riga e colonna, utilizzo pacchetto rasterVis
levelplot(copNDVI)










##### R_code_land_cover.r #####-8
setwd("C:/lab/")
library(raster)
library(RStoolbox) #per la classificazione
install.packages("ggplot2") #Per utilizzare le funzioni di ggplot
library(ggplot2)
library(ggplot2)
install.packages("gridExtra")
library(gridExtra)
defor1 <- brick("defor1.png") 
plotRGB(defor1, r=1, g=2, b=3, stretch="Lin")

#aggiungere coordinate all'immagine
ggRGB(defor1, r=1, g=2, b=3, stretch="Lin")

defor2 <- brick("defor2.png")
plotRGB(defor2, r=1, g=2, b=3, stretch="Lin")
ggRGB(defor2, r=1, g=2, b=3, stretch="Lin")

par(mfrow=c(1,2))
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

#il par non è sufficiente per ggRGB, quindi si utilizza un altro pacchetto
install.packages("gridExtra")
library(gridExtra)
#mettere insieme vari pezzi all'interno di un grafico
# multiframe con ggplot2 e gridExtra
p1 <- ggRGB(defor1, r=1, g=2, b=3, stretch="lin")
p2 <- ggRGB(defor2, r=1, g=2, b=3, stretch="lin")
grid.arrange(p1, p2, nrow=2)

#unsupervised classification, mostra indice vegetazionale, suddiviso in x classi
d1c <- unsuperClass(defor1, nClasses=2)
plot(d1c$map)
d2c <- unsuperClass(defor2, nClasses=2)
plot(d2c$map)
d2c3<-unsuperClass(defor2, nClasses=3)
plot(d2c3$map)

#frequenza delle due classi
freq(d1c$map)
 #  value  count
#[1,]     1  35314
#[2,]     2 305978
s1<-305978+35314

#proporzioni
prop1<-freq(d1c$map)/s1
#       count
#[1,] 0.1034715
#[2,] 0.8965285
#si può prendere il n.di pixel anche dalle informazioni
s2<-342726

freq(d2c$map)
#value count
#   value  count
#[1,]     1 177948
#[2,]     2 164778
prop2<-freq(d2c$map)/s2
#    count
#[1,]0.5192136
#[2,]0.4807864

#Creare dataframe su r
cover <- c("Agriculture","Forest")
percent_1992<- c(10.3,89.7)
percent_2006<- c(51.9,48.1)
percentages<-data.frame(cover, percent_1992, percent_2006)
percentages

#grafico ggplot, aes mappa le variabili, geom_bar dà info sulla visualizzazione dell'informazione
p1<-ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")
p2<-ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

#grafico
grid.arrange(p1, p2, nrow = 1) 












##### R_code_variability.r #####-9
#calcolo eterogeneità tramite dati Sentinel
library(raster)
library(RStoolbox)
library(ggplot2) #for ggplot plotting
library(gridExtra) #for plotting ggplots togheter
install.packages("viridis") #pacchetto con scale di colore predefinite
library (viridis)
setwd("C:/lab/")
sent <- brick("sentinel.png")
sent
#dato che si usa la sequenza di default non usiamo r=1, g=2 e b=3 
plotRGB(sent, stretch="lin") 
nir<-sent$sentinel.1
red<-sent$sentinel.2
ndvi<-(nir-red)/(nir+red)
plot(ndvi)
cl <- colorRampPalette(c('black','white','red','magenta','green'))(100) # 
plot(ndvi,col=cl)

#funzione focal per dati statistici, sd in questo caso è la deviazione standard
ndvisd3 <- focal(ndvi, w=matrix(1/9, nrow=3, ncol=3), fun=sd)
plot(ndvisd3)
clsd <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) #
plot(ndvisd3, col=clsd)
ndvimean3<-focal(ndvi, w=matrix(1/9, nrow=3, ncol=3), fun=mean)
plot(ndvimean3, col=clsd)
ndvisd13 <- focal(ndvi, w=matrix(1/169, nrow=13, ncol=13), fun=sd)
plot(ndvisd13, col=clsd)
ndvisd5 <- focal(ndvi, w=matrix(1/25, nrow=5, ncol=5), fun=sd)
plot(ndvisd5, col=clsd)

#esiste un altro metodo, la PCA
sentpca <- rasterPCA(sent)
plot(sentpca$map)
#per vedere da cosa è composta
sentpca
#per vedere quanta variabilità spiegano le singole componenti
summary(sentpca$model)
#la prima componente spiega più delle altre 


#guardiamo le componenti di sentpca, la prima si chiama PC1
pc1<-sentpca$map$PC1
focalpc1_sd5<-focal(pc1, w=matrix(1/25, nrow=5, ncol=5), fun=sd)
plot(focalpc1, col=clsd)

#funzione source carica direttamente un file da una cartella del pc
source("source_test_lezione.r")
source("source_ggplot.r")

#aprire una nuova finestra con ggplot
ggplot()+
#determina "geometria" del raster
geom_raster(focalpc1_sd5, mapping=aes(x=x, y=y, fill=layer))
#creare colorramppalette predefinita direttamente tramite viridis
p1<-ggplot() +
geom_raster(focalpc1_sd5, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis()
#utilizzo colorramppalette "magma"
p2<-ggplot() +
geom_raster(focalpc1_sd5, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis(option = "magma")  +
ggtitle("Standard deviation of PC1 by magma colour scale")
#utilizzo colorramppalette "inferno"
p3<-ggplot() +
geom_raster(focalpc1_sd5, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis(option = "inferno")  +
ggtitle("Standard deviation of PC1 by inferno colour scale")
#utilizzare un grid arrange diverso 
#in verticale
grid.arrange(p1,p2,p3, nrow=3)
#in orizzontale
grid.arrange(p1,p2,p3, nrow=1)


